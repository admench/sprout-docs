(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{313:function(t,e,n){"use strict";n.r(e);var a=n(0),s=Object(a.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h1",[t._v("Events & Hooks")]),n("p",[t._v("Sprout Forms can be extended using the following Events and Hooks.")]),t._m(0),t._m(1),n("p",[t._v("Raised before an entry is saved.")]),n("code-toggle",{attrs:{languages:["craft3","craft2"]}},[n("template",{slot:"craft3"},[n("div",{staticClass:"language-craft3 extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("use barrelstrength\\sproutforms\\elements\\Entry;\nuse yii\\base\\Event;\nuse Craft;\n\npublic function init()\n{\n    parent::init();\n    \n    Event::on(Entry::class, Entry::EVENT_AFTER_SAVE, function(Event $event) {\n        if (Craft::$app->request->isSiteRequest)\n        {\n            // A Form Entry Element has been saved from a Front-end Form Submission\n            // Access the Form Entry Element via: $event->sender\n        }\n        \n        if (Craft::$app->request->isCpRequest)\n        {\n            // A Form Entry Element has been updated from the Control Panel\n            // Access the Form Entry Element via: $event->sender\n        }\n    });\n}\n")])])])]),n("template",{slot:"craft2"},[n("div",{staticClass:"language-craft2 extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("sproutForms.onBeforeSaveEntry\n")])])])])],2),n("h4",[t._v("Params")]),t._m(2),t._m(3),n("p",[t._v("Raised just after an entry is saved")]),n("code-toggle",{attrs:{languages:["craft3","craft2"]}},[n("template",{slot:"craft3"},[n("div",{staticClass:"language-craft3 extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("use barrelstrength\\sproutforms\\elements\\Form;\nuse yii\\base\\Event;\n\npublic function init()\n{\n    parent::init();\n    \n    Event::on(Form::class, Form::EVENT_AFTER_SAVE, function(Event $event) {\n        \n        // A Form Element has been saved\n        // Access the Form Element via: $event->sender\n        \n    });\n}\n")])])])]),n("template",{slot:"craft2"},[n("div",{staticClass:"language-craft2 extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("sproutForms.onSaveEntry\n")])])])])],2),n("h4",[t._v("Params")]),t._m(4),t._m(5),t._m(6),t._m(7),n("code-toggle",{attrs:{languages:["craft3","craft2"]}},[n("template",{slot:"craft3"},[n("div",{staticClass:"language-craft3 extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public function init()\n{\n    parent::init();\n    \n    Craft::$app->view->hook('sproutForms.modifyForm', function(&$context) {\n        \n         // Prepare HTML for your template\n    \n        return $html;\n    });\n}\n")])])])]),n("template",{slot:"craft2"},[n("div",{staticClass:"language-craft2 extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public function init()\n{\n  craft()->templates->hook(\'sproutForms.modifyForm\', function(&$context)\n  {\n    $content = \'<div><input type="hidden" name="spammityspam" value="spam"></div>\';\n    return TemplateHelper::getRaw($content);\n  });\n}\n')])])])])],2)],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#events","aria-hidden":"true"}},[this._v("#")]),this._v(" Events")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"before-a-form-entry-is-saved"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#before-a-form-entry-is-saved","aria-hidden":"true"}},[this._v("#")]),this._v(" Before a Form Entry is saved")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("em",[this._v("entry")]),this._v(" – The submitted SproutForms_EntryModel")]),e("li",[e("em",[this._v("isNewEntry")]),this._v(" -  A boolean indicating whether this is a brand new form entry")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"after-a-form-entry-is-saved"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#after-a-form-entry-is-saved","aria-hidden":"true"}},[this._v("#")]),this._v(" After a Form Entry is Saved")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("em",[this._v("entry")]),this._v(" – The submitted SproutForms_EntryModel")]),e("li",[e("em",[this._v("isNewEntry")]),this._v(" -  A boolean indicating whether this is a brand new form entry")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hooks","aria-hidden":"true"}},[this._v("#")]),this._v(" Hooks")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"template-hook"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#template-hook","aria-hidden":"true"}},[this._v("#")]),this._v(" Template Hook")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{pre:!0},[e("p",[this._v("The "),e("code",[this._v("sproutForms.modifyForm")]),this._v(" Template Hook gives plugins a chance to dynamically add content to a form template. The hook will output content between the "),e("code",[this._v("<form>")]),this._v(" tags when using the "),e("code",[this._v("displayForm")]),this._v(" tag.")])])}],!1,null,null,null);e.default=s.exports}}]);